// Code generated by options, DO NOT EDIT.

package options

import (
	"github.com/fsnotify/fsnotify"
	"github.com/spf13/viper"
)

var (
	applicationOptions ApplicationOptions = ApplicationOptions{}
)

type ApplicationOptions struct {
	Command struct {
		//
		Build string `yaml:"command.build"`
		//
		Exec string `yaml:"command.exec"`
	}
	Watch struct {
		//
		Folders []string `yaml:"watch.folders"`
		// if empty, will default to execution path
		Root string `yaml:"watch.root"`
	}
}

func OptionsInit(configFilenamePtr *string) {

	// command.build
	applicationOptions.Command.Build = ""
	viper.SetDefault("command.build",
		applicationOptions.Command.Build,
	)

	// command.exec
	applicationOptions.Command.Exec = ""
	viper.SetDefault("command.exec",
		applicationOptions.Command.Exec,
	)

	// watch.folders
	applicationOptions.Watch.Folders = []string{""}
	viper.SetDefault("watch.folders",
		applicationOptions.Watch.Folders,
	)

	// watch.root
	applicationOptions.Watch.Root = ""
	viper.SetDefault("watch.root",
		applicationOptions.Watch.Root,
	)
	viper.AddConfigPath(".")
	if configFilenamePtr == nil {
		viper.SetConfigName("options")
	} else {
		viper.SetConfigName(*configFilenamePtr)
	}

	viper.SetConfigType("yaml")
	viper.WatchConfig()
	viper.OnConfigChange(func(in fsnotify.Event) {
		viper.Unmarshal(&applicationOptions)
	})

	viper.ReadInConfig()
	viper.Unmarshal(&applicationOptions)
}

func GetOptions() ApplicationOptions {
	return applicationOptions
}
